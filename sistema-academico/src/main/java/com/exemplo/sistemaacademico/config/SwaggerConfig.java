package com.exemplo.sistemaacademico.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.List;

/**
 * Configura√ß√£o personalizada do Swagger/OpenAPI.
 * 
 * Esta classe configura a documenta√ß√£o autom√°tica da API,
 * definindo informa√ß√µes detalhadas sobre o sistema, contatos,
 * licen√ßa e servidores dispon√≠veis. A documenta√ß√£o gerada
 * ser√° acess√≠vel atrav√©s do Swagger UI.
 */
@Configuration
public class SwaggerConfig {
    
    @Value("${server.servlet.context-path:/}")
    private String contextPath;
    
    /**
     * Configura a documenta√ß√£o OpenAPI personalizada.
     * 
     * Esta configura√ß√£o define metadados completos sobre a API,
     * incluindo informa√ß√µes de contato, licen√ßa e servidores
     * dispon√≠veis para teste da API.
     * 
     * @return Configura√ß√£o OpenAPI personalizada
     */
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Sistema Acad√™mico - API REST")
                        .version("1.0.0")
                        .description("""
                                ## Sistema de Gerenciamento Acad√™mico
                                
                                Esta API fornece endpoints completos para gerenciamento de um sistema acad√™mico,
                                incluindo opera√ß√µes para:
                                
                                ### üìö **Funcionalidades Principais**
                                - **Cursos**: Cria√ß√£o, edi√ß√£o, remo√ß√£o e consulta de cursos
                                - **Disciplinas**: Gerenciamento completo de disciplinas
                                - **Alunos**: Matr√≠cula, transfer√™ncia e consulta de alunos
                                - **Relacionamentos**: Associa√ß√£o entre cursos e disciplinas
                                
                                ### üõ†Ô∏è **Tecnologias Utilizadas**
                                - **Spring Boot 3.2.0**: Framework principal
                                - **Spring Data JPA**: Persist√™ncia e mapeamento objeto-relacional
                                - **H2 Database**: Banco de dados em mem√≥ria para desenvolvimento
                                - **Swagger/OpenAPI 3**: Documenta√ß√£o autom√°tica da API
                                - **Bean Validation**: Valida√ß√£o de dados de entrada
                                
                                ### üöÄ **Como Usar**
                                1. **Explore os endpoints**: Use as se√ß√µes abaixo para ver todas as opera√ß√µes dispon√≠veis
                                2. **Teste interativo**: Clique em qualquer endpoint e use o bot√£o "Try it out"
                                3. **Dados de exemplo**: O sistema j√° vem com dados pr√©-carregados para teste
                                4. **Console do banco**: Acesse `/h2-console` para visualizar os dados diretamente
                                
                                ### üìä **Modelo de Dados**
                                - **Curso** ‚Üî **Disciplina**: Relacionamento Many-to-Many
                                - **Curso** ‚Üí **Aluno**: Relacionamento One-to-Many
                                
                                ### ‚ö†Ô∏è **Notas Importantes**
                                - Este √© um ambiente de desenvolvimento com banco H2 em mem√≥ria
                                - Os dados s√£o reinicializados a cada restart da aplica√ß√£o
                                - Todas as opera√ß√µes s√£o validadas quanto √† integridade referencial
                                """)
                        .contact(new Contact()
                                .name("Equipe de Desenvolvimento")
                                .email("dev@sistemaacademico.com")
                                .url("https://github.com/sistemaacademico"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8080" + contextPath)
                                .description("Servidor de Desenvolvimento Local"),
                        new Server()
                                .url("https://api.sistemaacademico.com")
                                .description("Servidor de Produ√ß√£o (Exemplo)")
                ));
    }
}